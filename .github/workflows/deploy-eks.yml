name: Deploy to EKS
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: us-east-1

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Validate Kubernetes manifests
        run: |
          for file in EKS/*.yaml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              kubectl create --dry-run=client -f "$file"
            fi
          done

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
          kubectl config current-context

      - name: Check cluster connectivity
        run: |
          echo "Checking cluster nodes..."
          kubectl get nodes
          echo "Checking existing deployments..."
          kubectl get deployments

      - name: Deploy to EKS
        run: |
          echo "Applying deployment..."
          kubectl apply -f EKS/deployment.yaml
          
          echo "Applying service..."
          kubectl apply -f EKS/service.yaml

      - name: Wait for rollout
        run: |
          echo "Waiting for deployment to complete..."
          kubectl rollout status deployment/loomi-api --timeout=300s

      - name: Verify deployment
        run: |
          echo "Checking pod status..."
          kubectl get pods -l app=loomi-api
          
          echo "Checking deployment status..."
          kubectl describe deployment loomi-api
          
          echo "Checking service status..."
          kubectl get service loomi-api-service
          
          echo "Checking recent events..."
          kubectl get events --sort-by='.lastTimestamp' | tail -n 10

      - name: Health check
        run: |
          echo "Getting pod logs..."
          PODS=$(kubectl get pods -l app=loomi-api -o jsonpath='{.items[*].metadata.name}')
          for pod in $PODS; do
            echo "=== Logs for $pod ==="
            kubectl logs $pod --tail=50
          done

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
